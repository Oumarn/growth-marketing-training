"use client";

import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { CheckCircle, Target, TrendingUp, AlertTriangle, FileText, Calculator, BarChart3, Beaker, Zap, Bot, Settings, Database, Network, Shield, Download, Copy, Clock, Users, Play, Code, Lightbulb, ArrowRight, Star, Workflow, Eye, Lock } from 'lucide-react';

// Composant Score d'Automatisation
function AutomationScore() {
  const [scores, setScores] = useState({
    impact: 3,
    frequence: 3,
    clarte: 3,
    data: 3,
    risque: 3
  });

  const handleScoreChange = (criteria: string, value: number) => {
    setScores(prev => ({ ...prev, [criteria]: value }));
  };

  const totalScore = scores.impact + scores.frequence + scores.clarte + scores.data - scores.risque;
  const shouldAutomate = totalScore >= 10;

  const criteria = [
    { key: 'impact', label: 'Impact NSM', description: 'Faible ‚Üí Fort' },
    { key: 'frequence', label: 'Fr√©quence', description: 'Mensuelle ‚Üí Quotidienne' },
    { key: 'clarte', label: 'Clart√© des r√®gles', description: 'Flou ‚Üí Clair' },
    { key: 'data', label: 'Qualit√© data', description: 'Lacunaire ‚Üí Fiable' },
    { key: 'risque', label: 'Risque', description: '√âlev√© ‚Üí Faible (invers√©)' }
  ];

  return (
    <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-6 border border-blue-200 mb-8">
      <h3 className="text-xl font-bold text-gray-900 mb-6">üìä Score d'Automatisation (priorisation)</h3>
      
      <div className="grid md:grid-cols-2 gap-6">
        <div className="space-y-4">
          {criteria.map((criterion, index) => (
            <div key={index} className="bg-white rounded-lg p-4 border border-blue-200">
              <div className="flex items-center justify-between mb-2">
                <div>
                  <h4 className="font-medium text-gray-900">{criterion.label}</h4>
                  <p className="text-xs text-gray-600">{criterion.description}</p>
                </div>
                <div className="flex gap-1">
                  {[1, 2, 3, 4, 5].map((value) => (
                    <button
                      key={value}
                      onClick={() => handleScoreChange(criterion.key, value)}
                      className={`w-8 h-8 rounded-full text-sm font-medium transition-all ${
                        scores[criterion.key as keyof typeof scores] >= value
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-200 text-gray-600 hover:bg-gray-300'
                      }`}
                    >
                      {value}
                    </button>
                  ))}
                </div>
              </div>
            </div>
          ))}
        </div>

        <div className="bg-white rounded-lg p-6 border border-blue-200">
          <div className="text-center">
            <div className={`text-4xl font-bold mb-4 ${shouldAutomate ? 'text-green-600' : 'text-red-600'}`}>
              {totalScore}
            </div>
            <div className={`text-lg font-semibold mb-2 ${shouldAutomate ? 'text-green-600' : 'text-red-600'}`}>
              {shouldAutomate ? '‚úÖ GO - Automatiser' : '‚ùå √âviter pour l\'instant'}
            </div>
            <p className="text-sm text-gray-600">
              Score = (Impact + Fr√©quence + Clart√© + Data) ‚àí Risque
            </p>
            <p className="text-xs text-gray-500 mt-2">
              Seuil recommand√© : ‚â• 10
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

// Composant Processus Standard
function ProcessusStandard() {
  const [currentStep, setCurrentStep] = useState(0);

  const steps = [
    {
      title: "But NSM",
      description: "Choisissez l'input √† bouger",
      example: "ex. Activation J1",
      icon: Target,
      details: "Identifiez clairement quel input de votre North Star Metric vous voulez impacter. Cela guidera toutes les d√©cisions suivantes."
    },
    {
      title: "Mapper le flux",
      description: "Qui ? Quoi ? Quand ? O√π ? Donn√©es ?",
      example: "Cartographier l'existant",
      icon: Network,
      details: "Documentez pr√©cis√©ment le processus actuel : acteurs, √©tapes, points de donn√©es, timing, outils utilis√©s."
    },
    {
      title: "Standardiser",
      description: "R√®gles/prompts & outputs attendus",
      example: "Format JSON/CSV",
      icon: Settings,
      details: "D√©finissez des r√®gles claires et des formats de sortie standardis√©s. Cette √©tape est cruciale pour la suite."
    },
    {
      title: "Automatiser",
      description: "n8n : trigger ‚Üí traitement ‚Üí sortie ‚Üí logs",
      example: "Workflow complet",
      icon: Zap,
      details: "Construisez le workflow avec d√©clencheur, logique de traitement, actions de sortie et journalisation."
    },
    {
      title: "Mesurer",
      description: "Log lignes ‚Üí Dashboard (Module 4)",
      example: "KPIs track√©s",
      icon: BarChart3,
      details: "Int√©grez les m√©triques dans votre dashboard existant pour suivre l'impact de l'automatisation."
    },
    {
      title: "Gouverner",
      description: "Owner, alertes, versioning, rollback",
      example: "Maintenance & contr√¥le",
      icon: Shield,
      details: "√âtablissez la gouvernance : responsable, syst√®me d'alertes, gestion des versions, plan de rollback."
    }
  ];

  return (
    <div className="mb-8">
      <h3 className="text-xl font-bold text-gray-900 mb-6">‚öôÔ∏è Processus Standard (6 √©tapes)</h3>
      
      <div className="grid lg:grid-cols-3 gap-6">
        {/* Navigation des √©tapes */}
        <div className="space-y-2">
          {steps.map((step, index) => (
            <button
              key={index}
              onClick={() => setCurrentStep(index)}
              className={`w-full text-left p-3 rounded-lg border text-sm transition-all ${
                currentStep === index
                  ? 'bg-indigo-600 text-white border-indigo-600'
                  : 'bg-white text-gray-700 border-gray-200 hover:bg-gray-50'
              }`}
            >
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 rounded-full bg-white/20 flex items-center justify-center">
                  {React.createElement(step.icon, { className: "w-4 h-4" })}
                </div>
                <div className="flex-1">
                  <div className="font-medium">{index + 1}. {step.title}</div>
                  <div className="text-xs opacity-75 mt-1">{step.description}</div>
                </div>
              </div>
            </button>
          ))}
        </div>

        {/* D√©tail de l'√©tape s√©lectionn√©e */}
        <div className="lg:col-span-2">
          <div className="bg-indigo-50 rounded-lg p-6 border border-indigo-200">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-12 h-12 bg-indigo-600 rounded-full flex items-center justify-center text-white">
                {React.createElement(steps[currentStep].icon, { className: "w-6 h-6" })}
              </div>
              <div>
                <h4 className="font-bold text-indigo-900 text-lg">{steps[currentStep].title}</h4>
                <p className="text-indigo-700">{steps[currentStep].description}</p>
              </div>
            </div>
            
            <div className="bg-white rounded-lg p-4 border border-indigo-200 mb-4">
              <div className="text-sm font-medium text-indigo-900 mb-2">Exemple</div>
              <div className="text-indigo-700">{steps[currentStep].example}</div>
            </div>

            <div className="bg-white rounded-lg p-4 border border-indigo-200">
              <div className="text-sm font-medium text-indigo-900 mb-2">D√©tails</div>
              <div className="text-gray-700 text-sm">{steps[currentStep].details}</div>
            </div>
          </div>
        </div>
      </div>

      <div className="mt-6 p-4 bg-yellow-50 rounded-lg border border-yellow-200">
        <div className="flex items-start gap-2">
          <AlertTriangle className="w-5 h-5 text-yellow-600 mt-0.5" />
          <div>
            <p className="font-medium text-yellow-800 text-sm">Point cl√©</p>
            <p className="text-yellow-700 text-sm">
              Ne sautez jamais la standardisation. C'est la garantie que votre automatisation sera robuste et maintenable.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

// Composant Bo√Æte √† outils
function BoiteAOutils() {
  const [selectedCategory, setSelectedCategory] = useState(0);

  const categories = [
    {
      name: "Orchestration",
      icon: Workflow,
      color: "bg-purple-50 border-purple-200",
      tools: [
        { name: "n8n", description: "Open source, branches, retries, webhooks", status: "recommand√©" }
      ]
    },
    {
      name: "Stockage/√âchange",
      icon: Database,
      color: "bg-blue-50 border-blue-200",
      tools: [
        { name: "Google Sheets", description: "Simple, collaboratif, API native", status: "facile" },
        { name: "Airtable", description: "Base de donn√©es relationnelle", status: "interm√©diaire" },
        { name: "Notion", description: "Documentation + donn√©es", status: "hybride" }
      ]
    },
    {
      name: "Intelligence Artificielle",
      icon: Bot,
      color: "bg-red-50 border-red-200",
      tools: [
        { name: "LLM APIs", description: "G√©n√©rer, r√©sumer, classer", status: "essentiel" },
        { name: "Temp√©rature basse", description: "0.2-0.4 pour l'analyse", status: "conseil" },
        { name: "JSON strict", description: "Format de sortie standardis√©", status: "obligatoire" }
      ]
    },
    {
      name: "Canaux",
      icon: Network,
      color: "bg-green-50 border-green-200",
      tools: [
        { name: "Google/Meta/LinkedIn Ads", description: "APIs publicitaires", status: "business" },
        { name: "Social APIs", description: "Buffer, Hootsuite", status: "contenu" },
        { name: "Email APIs", description: "Sendgrid, Mailjet", status: "automation" },
        { name: "CRM APIs", description: "HubSpot, Salesforce", status: "leads" }
      ]
    },
    {
      name: "Monitoring",
      icon: Eye,
      color: "bg-yellow-50 border-yellow-200",
      tools: [
        { name: "Slack", description: "Alertes temps r√©el", status: "communication" },
        { name: "Logs Sheets/DB", description: "Journalisation structur√©e", status: "tra√ßabilit√©" },
        { name: "UTM & Events", description: "Tracking propre", status: "mesure" }
      ]
    }
  ];

  return (
    <div className="mb-8">
      <h3 className="text-xl font-bold text-gray-900 mb-6">üß∞ Bo√Æte √† outils (piliers)</h3>
      
      <div className="grid lg:grid-cols-4 gap-6">
        {/* Navigation cat√©gories */}
        <div className="space-y-2">
          {categories.map((category, index) => (
            <button
              key={index}
              onClick={() => setSelectedCategory(index)}
              className={`w-full text-left p-3 rounded-lg border text-sm transition-all ${
                selectedCategory === index
                  ? 'bg-gray-800 text-white border-gray-800'
                  : 'bg-white text-gray-700 border-gray-200 hover:bg-gray-50'
              }`}
            >
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 rounded-lg bg-white/20 flex items-center justify-center">
                  {React.createElement(category.icon, { className: "w-4 h-4" })}
                </div>
                <div className="font-medium">{category.name}</div>
              </div>
            </button>
          ))}
        </div>

        {/* Outils de la cat√©gorie s√©lectionn√©e */}
        <div className="lg:col-span-3">
          <div className={`rounded-lg p-6 border ${categories[selectedCategory].color}`}>
            <div className="flex items-center gap-3 mb-6">
              <div className="w-12 h-12 bg-white rounded-full flex items-center justify-center border">
                {React.createElement(categories[selectedCategory].icon, { className: "w-6 h-6 text-gray-700" })}
              </div>
              <h4 className="font-bold text-gray-900 text-lg">{categories[selectedCategory].name}</h4>
            </div>
            
            <div className="space-y-4">
              {categories[selectedCategory].tools.map((tool, index) => (
                <div key={index} className="bg-white rounded-lg p-4 border border-gray-200 flex items-start gap-3">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <h5 className="font-medium text-gray-900">{tool.name}</h5>
                      <Badge variant="secondary" className="text-xs">
                        {tool.status}
                      </Badge>
                    </div>
                    <p className="text-sm text-gray-600">{tool.description}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
        <div className="flex items-start gap-2">
          <Lightbulb className="w-5 h-5 text-blue-600 mt-0.5" />
          <div>
            <p className="font-medium text-blue-800 text-sm">Conseil de d√©marrage</p>
            <p className="text-blue-700 text-sm">
              Commencez "l√©ger" avec Sheets + Slack, puis migrez vers des outils plus avanc√©s (DB/BI) quand le volume le justifie.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

// Composant Patrons de Workflows
function PatronsWorkflows() {
  const patterns = [
    {
      name: "Social ‚Äî Top Post Radar",
      description: "Identifier et cloner les posts performants",
      steps: ["Collecter", "Classer ER", "Analyser (IA)", "Cloner", "Sheet", "Slack", "Log"],
      color: "bg-blue-50 border-blue-200",
      icon: TrendingUp
    },
    {
      name: "SEA ‚Äî Pacing & Refresh", 
      description: "Optimiser budgets et cr√©er nouveaux assets",
      steps: ["Calcul CTR/CVR/CPA", "D√©tecter anomalies", "RSA assets (IA)", "Sheet", "Slack"],
      color: "bg-green-50 border-green-200", 
      icon: Target
    },
    {
      name: "Email ‚Äî NPS ‚Üí Actions",
      description: "Router les retours NPS vers les bonnes actions",
      steps: ["NPS in", "Classer score", "Relance avis/parrainage", "Ticket support"],
      color: "bg-purple-50 border-purple-200",
      icon: Users
    },
    {
      name: "Lead Enrichment",
      description: "Enrichir et scorer les nouveaux leads",
      steps: ["Webhook lead", "Enrichir donn√©es", "Score qualit√©", "Router Slack/CRM"],
      color: "bg-orange-50 border-orange-200",
      icon: Database
    }
  ];

  return (
    <div className="mb-8">
      <h3 className="text-xl font-bold text-gray-900 mb-6">üîÑ Patrons de workflows (reproductibles)</h3>
      
      <div className="grid md:grid-cols-2 gap-6">
        {patterns.map((pattern, index) => (
          <div key={index} className={`rounded-lg p-6 border ${pattern.color}`}>
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 bg-white rounded-lg flex items-center justify-center border">
                {React.createElement(pattern.icon, { className: "w-5 h-5 text-gray-700" })}
              </div>
              <div>
                <h4 className="font-semibold text-gray-900">{pattern.name}</h4>
                <p className="text-sm text-gray-600">{pattern.description}</p>
              </div>
            </div>
            
            <div className="space-y-2">
              <div className="text-xs font-medium text-gray-500 mb-2">√âTAPES</div>
              <div className="flex flex-wrap gap-2">
                {pattern.steps.map((step, stepIndex) => (
                  <div key={stepIndex} className="flex items-center gap-1">
                    <div className="bg-white px-2 py-1 rounded text-xs font-medium text-gray-700 border">
                      {step}
                    </div>
                    {stepIndex < pattern.steps.length - 1 && (
                      <ArrowRight className="w-3 h-3 text-gray-400" />
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

// Composant Gouvernance & S√©curit√©
function Gouvernance() {
  const aspects = [
    {
      title: "PII & Confidentialit√©",
      icon: Lock,
      items: [
        "Minimiser les donn√©es personnelles collect√©es",
        "Pseudonymiser quand possible", 
        "Conserver le strict n√©cessaire",
        "Documenter les traitements"
      ],
      color: "bg-red-50 border-red-200"
    },
    {
      title: "Secrets & Acc√®s",
      icon: Shield,
      items: [
        "Vault n8n pour les cl√©s API",
        "Acc√®s par r√¥le (principe du moindre privil√®ge)",
        "Rotation r√©guli√®re des cl√©s",
        "Audit des acc√®s"
      ],
      color: "bg-blue-50 border-blue-200"
    },
    {
      title: "Qualit√© & Tests",
      icon: CheckCircle,
      items: [
        "QA en environnement de staging",
        "Tests unitaires des prompts",
        "Few-shot examples stables",
        "Validation des outputs"
      ],
      color: "bg-green-50 border-green-200"
    },
    {
      title: "SLA & R√©silience",
      icon: Clock,
      items: [
        "M√©canismes de retry et backoff",
        "Dead Letter Queue (DLQ)",
        "Monitoring des quotas API",
        "Plans de rollback document√©s"
      ],
      color: "bg-yellow-50 border-yellow-200"
    },
    {
      title: "Audit & Tra√ßabilit√©",
      icon: FileText,
      items: [
        "Logs horodat√©s de toutes les op√©rations",
        "Versioning des prompts et param√®tres",
        "Tra√ßabilit√© des d√©cisions IA",
        "R√©tention et archivage des logs"
      ],
      color: "bg-purple-50 border-purple-200"
    }
  ];

  return (
    <div className="mb-8">
      <h3 className="text-xl font-bold text-gray-900 mb-6">üõ°Ô∏è Gouvernance, s√©curit√©, conformit√©</h3>
      
      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {aspects.map((aspect, index) => (
          <div key={index} className={`rounded-lg p-6 border ${aspect.color}`}>
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 bg-white rounded-lg flex items-center justify-center border">
                {React.createElement(aspect.icon, { className: "w-5 h-5 text-gray-700" })}
              </div>
              <h4 className="font-semibold text-gray-900">{aspect.title}</h4>
            </div>
            
            <ul className="space-y-2">
              {aspect.items.map((item, itemIndex) => (
                <li key={itemIndex} className="text-sm text-gray-700 flex items-start gap-2">
                  <div className="w-1.5 h-1.5 bg-gray-400 rounded-full mt-2 flex-shrink-0"></div>
                  {item}
                </li>
              ))}
            </ul>
          </div>
        ))}
      </div>

      <div className="mt-6 p-4 bg-gray-800 text-white rounded-lg">
        <div className="flex items-center gap-2 mb-2">
          <Star className="w-5 h-5 text-yellow-400" />
          <span className="font-semibold">R√®gle d'or</span>
        </div>
        <p className="text-gray-200">"Si ce n'est pas logg√©, ce n'est pas fait"</p>
      </div>
    </div>
  );
}

// Composant Anti-patterns
function AntiPatterns() {
  const antiPatterns = [
    {
      problem: "Automatiser avant de stabiliser le process",
      solution: "Standardisez d'abord manuellement, puis automatisez",
      icon: AlertTriangle
    },
    {
      problem: "Prompts flous (pas de format/crit√®res)", 
      solution: "Sp√©cifiez format JSON strict, contraintes et exemples",
      icon: FileText
    },
    {
      problem: "Pas de guardrails (envoi public sans revue)",
      solution: "Ajoutez validation, mod√©ration et circuits d'approbation",
      icon: Shield
    },
    {
      problem: "Donn√©es sales (UTM incoh√©rents, IDs manquants)",
      solution: "Nettoyage des donn√©es en amont, validation des inputs",
      icon: Database
    }
  ];

  return (
    <div className="mb-8">
      <h3 className="text-xl font-bold text-gray-900 mb-6">‚ö†Ô∏è Anti-patterns & d√©pannage</h3>
      
      <div className="space-y-4">
        {antiPatterns.map((item, index) => (
          <div key={index} className="bg-red-50 rounded-lg p-4 border border-red-200">
            <div className="flex items-start gap-4">
              <div className="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center flex-shrink-0">
                {React.createElement(item.icon, { className: "w-5 h-5 text-red-600" })}
              </div>
              <div className="flex-1">
                <h4 className="font-medium text-red-900 mb-2">‚ùå {item.problem}</h4>
                <p className="text-sm text-red-700">‚úÖ {item.solution}</p>
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
        <div className="flex items-start gap-2">
          <Lightbulb className="w-5 h-5 text-blue-600 mt-0.5" />
          <div>
            <p className="font-medium text-blue-800 text-sm">Deux mots d'ordre</p>
            <p className="text-blue-700 text-sm">
              <strong>Petit p√©rim√®tre, forte fiabilit√©.</strong> Mieux vaut une automatisation simple qui marche qu'une complexe qui √©choue.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

// Composant Automation Canvas (Atelier)
function AutomationCanvas() {
  const canvasFields = [
    { label: "Nom & objectif", description: "NSM + input vis√©", placeholder: "Ex: Activation J1 via onboarding personnalis√©" },
    { label: "Score d'automatisation", description: "Impact, Fr√©quence, Clart√©, Data, Risque", placeholder: "Impact:4, Fr√©quence:5, Clart√©:3, Data:4, Risque:2 = Score:14" },
    { label: "D√©clencheur", description: "Cron/webhook/event", placeholder: "Ex: Webhook nouveau lead, cron quotidien 9h" },
    { label: "Entr√©es", description: "Source, sch√©ma, exemples", placeholder: "Ex: CRM webhook {email, company, source, timestamp}" },
    { label: "R√®gles / Prompt", description: "Format JSON strict, contraintes", placeholder: "Ex: Analyser secteur + taille ‚Üí recommander parcours A/B/C" },
    { label: "Actions", description: "API/Sheet/Slack/Email", placeholder: "Ex: Cr√©er t√¢che CRM + email s√©quence + Slack commercial" },
    { label: "Logs", description: "Champs, table/onglet, r√©tention", placeholder: "Ex: timestamp, lead_id, parcours_choisi, action_prise" },
    { label: "KPIs & seuils", description: "Primaire, secondaires, guardrails", placeholder: "Ex: Taux activation J7 >40%, temps r√©ponse <2h" },
    { label: "S√©curit√©", description: "PII, secrets, acc√®s", placeholder: "Ex: Chiffrement email, vault API, acc√®s √©quipe growth uniquement" },
    { label: "Plan test & rollback", description: "Comment tester et revenir en arri√®re", placeholder: "Ex: Test avec 10% traffic, rollback manuel si erreur >5%" },
    { label: "Owner, fr√©quence, SLA", description: "Responsable, cadence, temps de r√©ponse", placeholder: "Ex: Owner: Growth PM, Check quotidien, SLA 4h" }
  ];

  return (
    <div className="mb-8">
      <h3 className="text-xl font-bold text-gray-900 mb-6">üìã Atelier guid√© (30-45') ‚Äî Automation Canvas</h3>
      
      <div className="bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg p-6 border border-green-200 mb-6">
        <h4 className="font-semibold text-green-900 mb-2">üéØ Objectif</h4>
        <p className="text-green-800 text-sm">
          Prioriser 2 automatisations align√©es NSM et prototyper 1 workflow complet.
        </p>
      </div>

      <div className="grid lg:grid-cols-2 gap-8">
        {/* √âtapes de l'atelier */}
        <div>
          <h4 className="font-semibold text-gray-900 mb-4">üìù √âtapes de l'atelier</h4>
          <div className="space-y-4">
            <div className="bg-white rounded-lg p-4 border border-gray-200">
              <div className="flex items-center gap-3 mb-2">
                <div className="w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold">1</div>
                <h5 className="font-medium text-gray-900">Backlog & Scoring</h5>
              </div>
              <p className="text-sm text-gray-600">
                Listez 6 t√¢ches candidates ‚Üí Score d'Automatisation (‚â•10 = shortlist)
              </p>
            </div>

            <div className="bg-white rounded-lg p-4 border border-gray-200">
              <div className="flex items-center gap-3 mb-2">
                <div className="w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold">2</div>
                <h5 className="font-medium text-gray-900">Canvas Complet</h5>
              </div>
              <p className="text-sm text-gray-600">
                Remplissez le canvas pour l'automatisation #1 (voir champs ci-contre)
              </p>
            </div>

            <div className="bg-white rounded-lg p-4 border border-gray-200">
              <div className="flex items-center gap-3 mb-2">
                <div className="w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold">3</div>
                <h5 className="font-medium text-gray-900">Maquette n8n</h5>
              </div>
              <p className="text-sm text-gray-600">
                Dessinez les n≈ìuds et variables d'environnement sur tableau
              </p>
            </div>

            <div className="bg-white rounded-lg p-4 border border-gray-200">
              <div className="flex items-center gap-3 mb-2">
                <div className="w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold">4</div>
                <h5 className="font-medium text-gray-900">Restitution</h5>
              </div>
              <p className="text-sm text-gray-600">
                Pr√©sentation flash (1 min/√©quipe) des r√©sultats
              </p>
            </div>
          </div>
        </div>

        {/* Canvas template */}
        <div>
          <h4 className="font-semibold text-gray-900 mb-4">üìã Template Automation Canvas</h4>
          <div className="bg-gray-50 rounded-lg p-4 border border-gray-200 max-h-96 overflow-y-auto">
            <div className="space-y-3">
              {canvasFields.map((field, index) => (
                <div key={index} className="bg-white rounded p-3 border border-gray-200">
                  <div className="font-medium text-gray-900 text-sm mb-1">{field.label}</div>
                  <div className="text-xs text-gray-500 mb-2">{field.description}</div>
                  <div className="text-xs text-gray-400 italic">{field.placeholder}</div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      <div className="mt-6 p-4 bg-purple-50 rounded-lg border border-purple-200">
        <div className="flex items-center gap-2 mb-2">
          <Download className="w-5 h-5 text-purple-600" />
          <span className="font-semibold text-purple-900">Livrables</span>
        </div>
        <p className="text-purple-800 text-sm">
          1 Automation Canvas complet + 1 maquette workflow n8n
        </p>
      </div>
    </div>
  );
}

// Composant principal
export default function Module6Content() {
  return (
    <div className="space-y-16">
      {/* SLIDE 1: TITRE ET OBJECTIFS */}
      <section className="min-h-screen bg-gradient-to-br from-indigo-600 via-purple-600 to-blue-800 text-white flex items-center justify-center p-8 rounded-3xl">
        <div className="text-center max-w-4xl">
          <div className="text-8xl mb-8">ü§ñ</div>
          <h1 className="text-6xl font-bold mb-8 leading-tight">Module 6</h1>
          <h2 className="text-4xl font-light mb-12 text-blue-100">Pourquoi & Comment automatiser</h2>
          <div className="text-xl text-blue-200 mb-8">No-Code + IA ‚Ä¢ Processus ‚Ä¢ Gouvernance</div>
          <div className="grid md:grid-cols-4 gap-6 mt-12">
            <div className="bg-white/10 rounded-lg p-4 text-center">
              <Target className="w-8 h-8 mx-auto mb-2" />
              <div className="text-sm">Choisir quoi automatiser</div>
            </div>
            <div className="bg-white/10 rounded-lg p-4 text-center">
              <Workflow className="w-8 h-8 mx-auto mb-2" />
              <div className="text-sm">Processus standard</div>
            </div>
            <div className="bg-white/10 rounded-lg p-4 text-center">
              <Settings className="w-8 h-8 mx-auto mb-2" />
              <div className="text-sm">Bo√Æte √† outils</div>
            </div>
            <div className="bg-white/10 rounded-lg p-4 text-center">
              <Shield className="w-8 h-8 mx-auto mb-2" />
              <div className="text-sm">Garde-fous</div>
            </div>
          </div>
        </div>
      </section>

      {/* SLIDE 2: POURQUOI AUTOMATISER */}
      <section className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 p-8 rounded-3xl flex items-center">
        <div className="max-w-6xl mx-auto w-full">
          <div className="text-center mb-16">
            <div className="text-6xl mb-6">‚ö°</div>
            <h2 className="text-5xl font-bold text-gray-800 mb-4">Pourquoi automatiser en Growth ?</h2>
            <div className="w-32 h-1 bg-green-500 mx-auto"></div>
          </div>
          
          <div className="grid md:grid-cols-2 gap-12 mb-12">
            <div className="bg-white rounded-2xl p-8 shadow-2xl">
              <h3 className="text-2xl font-bold text-green-700 mb-6 flex items-center gap-3">
                <TrendingUp className="w-8 h-8" />
                Levier
              </h3>
              <ul className="space-y-4 text-gray-700">
                <li className="flex items-center gap-3">
                  <Zap className="w-5 h-5 text-green-500" />
                  <span>+ vitesse d'it√©ration</span>
                </li>
                <li className="flex items-center gap-3">
                  <CheckCircle className="w-5 h-5 text-green-500" />
                  <span>+ coh√©rence des actions</span>
                </li>
                <li className="flex items-center gap-3">
                  <Shield className="w-5 h-5 text-green-500" />
                  <span>‚àí erreurs humaines</span>
                </li>
              </ul>
            </div>

            <div className="bg-white rounded-2xl p-8 shadow-2xl">
              <h3 className="text-2xl font-bold text-blue-700 mb-6 flex items-center gap-3">
                <Target className="w-8 h-8" />
                Focus
              </h3>
              <p className="text-gray-700 mb-4">
                Lib√®re du temps pour la recherche d'insights et les tests A/B
              </p>
              <p className="text-gray-600 text-sm">
                L'automatisation des t√¢ches r√©p√©titives permet de se concentrer sur la strat√©gie et l'exp√©rimentation.
              </p>
            </div>
          </div>

          <div className="bg-white rounded-2xl p-8 shadow-2xl">
            <h3 className="text-2xl font-bold text-purple-700 mb-6 flex items-center gap-3">
              <Network className="w-8 h-8" />
              Exemples concrets
            </h3>
            <div className="grid md:grid-cols-3 gap-6">
              <div className="bg-purple-50 rounded-lg p-4 border border-purple-200">
                <h4 className="font-semibold text-purple-900 mb-2">"Top Post Radar"</h4>
                <p className="text-purple-700 text-sm">Identifier et cloner automatiquement les posts performants</p>
              </div>
              <div className="bg-purple-50 rounded-lg p-4 border border-purple-200">
                <h4 className="font-semibold text-purple-900 mb-2">"SEA Budget Pacing"</h4>
                <p className="text-purple-700 text-sm">Optimiser les budgets publicitaires en temps r√©el</p>
              </div>
              <div className="bg-purple-50 rounded-lg p-4 border border-purple-200">
                <h4 className="font-semibold text-purple-900 mb-2">"Lead Enrichment"</h4>
                <p className="text-purple-700 text-sm">Enrichir et router les leads automatiquement</p>
              </div>
            </div>
          </div>

          <div className="mt-8 p-6 bg-orange-100 rounded-2xl border border-orange-200">
            <div className="flex items-center gap-3 mb-3">
              <AlertTriangle className="w-6 h-6 text-orange-600" />
              <h4 className="font-semibold text-orange-900">Point cl√©</h4>
            </div>
            <p className="text-orange-800">
              Automatisez ce qui impacte un input NSM, pas ce qui est "cool". L'objectif est l'efficacit√© business, pas la technologie.
            </p>
          </div>
        </div>
      </section>

      {/* SLIDE 3: QUAND AUTOMATISER */}
      <section className="bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg p-8 mb-16">
        <h2 className="text-3xl font-bold text-gray-900 mb-8 text-center">ü§î Quand automatiser (et quand √©viter)</h2>
        
        <div className="grid md:grid-cols-2 gap-8">
          <div className="bg-white rounded-lg p-6 border border-green-200">
            <h3 className="text-xl font-semibold text-green-700 mb-4 flex items-center gap-2">
              ‚úÖ Automatiser si
            </h3>
            <ul className="space-y-3">
              <li className="flex items-start gap-3">
                <div className="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                <div>
                  <strong>T√¢che r√©p√©titive</strong> (‚â• 1√ó/semaine)
                </div>
              </li>
              <li className="flex items-start gap-3">
                <div className="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                <div>
                  <strong>R√®gles claires</strong> (if/then) ou prompt stable
                </div>
              </li>
              <li className="flex items-start gap-3">
                <div className="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                <div>
                  <strong>Donn√©es fiables</strong> (events/UTM/IDs)
                </div>
              </li>
              <li className="flex items-start gap-3">
                <div className="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                <div>
                  <strong>Impact direct</strong> sur un input NSM
                </div>
              </li>
            </ul>
          </div>

          <div className="bg-white rounded-lg p-6 border border-red-200">
            <h3 className="text-xl font-semibold text-red-700 mb-4 flex items-center gap-2">
              ‚ùå √âviter si
            </h3>
            <ul className="space-y-3">
              <li className="flex items-start gap-3">
                <div className="w-2 h-2 bg-red-500 rounded-full mt-2"></div>
                <div>
                  <strong>Process instable</strong> ou changeant fr√©quemment
                </div>
              </li>
              <li className="flex items-start gap-3">
                <div className="w-2 h-2 bg-red-500 rounded-full mt-2"></div>
                <div>
                  <strong>Data bruit√©e/PII sensible</strong> sans garde-fous
                </div>
              </li>
              <li className="flex items-start gap-3">
                <div className="w-2 h-2 bg-red-500 rounded-full mt-2"></div>
                <div>
                  <strong>Risque utilisateur √©lev√©</strong> (impact client direct)
                </div>
              </li>
            </ul>
          </div>
        </div>

        <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
          <div className="flex items-start gap-2">
            <Lightbulb className="w-5 h-5 text-blue-600 mt-0.5" />
            <div>
              <p className="font-medium text-blue-800 text-sm">Conseil</p>
              <p className="text-blue-700 text-sm">
                Gardez une part "manuel" au d√©but pour stabiliser le process avant d'automatiser compl√®tement.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* Score d'automatisation */}
      <AutomationScore />

      {/* Processus standard */}
      <ProcessusStandard />

      {/* Bo√Æte √† outils */}
      <BoiteAOutils />

      {/* Patrons de workflows */}
      <PatronsWorkflows />

      {/* Gouvernance */}
      <Gouvernance />

      {/* Anti-patterns */}
      <AntiPatterns />

      {/* Automation Canvas */}
      <AutomationCanvas />

      {/* √âvaluation */}
      <div className="bg-gradient-to-r from-purple-50 to-indigo-50 rounded-lg p-6 border border-purple-200 mb-8">
        <h3 className="text-xl font-bold text-gray-900 mb-6">üìä √âvaluation & bar√®me</h3>
        
        <div className="grid md:grid-cols-2 gap-6">
          {[
            { criteria: "Lien NSM & clart√© de l'objetif", weight: "25%", description: "Alignement avec la North Star Metric" },
            { criteria: "Canvas complet & garde-fous", weight: "25%", description: "Qualit√© de la documentation et s√©curit√©" },
            { criteria: "Log & mesure pr√™ts pour Dashboard", weight: "25%", description: "Int√©gration avec le syst√®me de mesure" },
            { criteria: "Pertinence outils & faisabilit√©", weight: "25%", description: "Choix technologiques et r√©alisme" }
          ].map((item, index) => (
            <div key={index} className="bg-white rounded-lg p-4 border border-purple-200 flex items-center justify-between">
              <div className="flex-1">
                <h4 className="font-medium text-gray-900">{item.criteria}</h4>
                <p className="text-sm text-gray-600">{item.description}</p>
              </div>
              <div className="bg-purple-100 px-3 py-1 rounded-lg">
                <span className="font-bold text-purple-700">{item.weight}</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Download Pack */}
      <div className="bg-gradient-to-r from-indigo-600 to-purple-600 rounded-lg p-8 text-white text-center">
        <div className="text-6xl mb-4">üì¶</div>
        <h3 className="text-2xl font-bold mb-4">Templates Module 6 ‚Äî Automation</h3>
        <p className="text-indigo-100 mb-6 max-w-2xl mx-auto">
          T√©l√©chargez l'Automation Canvas, le template de scoring, et tous les outils 
          pour prioriser et construire vos automatisations no-code.
        </p>
        
        <div className="flex flex-wrap justify-center gap-4 mb-6">
          <div className="bg-white/10 rounded-lg p-3 text-sm">
            <FileText className="w-5 h-5 mx-auto mb-1" />
            <span>Automation Canvas</span>
          </div>
          <div className="bg-white/10 rounded-lg p-3 text-sm">
            <Calculator className="w-5 h-5 mx-auto mb-1" />
            <span>Scoring Template</span>
          </div>
          <div className="bg-white/10 rounded-lg p-3 text-sm">
            <Bot className="w-5 h-5 mx-auto mb-1" />
            <span>Prompts Ready</span>
          </div>
          <div className="bg-white/10 rounded-lg p-3 text-sm">
            <Workflow className="w-5 h-5 mx-auto mb-1" />
            <span>Workflow Patterns</span>
          </div>
        </div>
        
        <div className="flex flex-col sm:flex-row gap-3 justify-center">
          <Button 
            className="bg-white text-indigo-600 hover:bg-indigo-50 font-semibold px-6 py-3"
            onClick={() => window.open('/download', '_blank')}
          >
            üì• T√©l√©charger Templates Automation
          </Button>
          <Button 
            variant="outline" 
            className="border-white text-white hover:bg-white hover:text-indigo-600 px-6 py-3"
            onClick={() => window.open('/templates', '_blank')}
          >
            üìã Voir Tous les Templates
          </Button>
        </div>
      </div>
    </div>
  );
}
